
<div ##{idFilterChips}>
  <details :not (null selectedSectors):open ##{idDetailsSectors}>
    <summary.md-typescale-label-large #idSummarySectors>
      <md-ripple for=idSummarySectors>
      _{MsgSectors}

    <md-chip-set ##{idChipSetSectors}>
      $forall Entity tid (Sector name _ _) <- sectors
        $with (isSelected,theId) <- (elem tid selectedSectors,pack $ show $ fromSqlKey tid)
          $with scrollParams <- [(paramX2,pack $ show scrollX2),(paramX3,pack $ show scrollX3)]
            <md-filter-chip label=#{name} :isSelected:selected onclick="this.querySelector('a[href]').click()">
              $with params <- ((<>) (inputBusinesses <> inputWorkspaces) scrollParams)
                <a.with-scroll-x data-with-scroll-x-target=#{idChipSetSectors} data-with-scroll-x-param=#{paramX1}
                   :isSelected:href=@?{(DataR ServicesR,((<>) (filter (((/=) theId) . snd) inputSectors) params))}
                   :not isSelected:href=@?{(DataR ServicesR,((<>) ((:) (paramSector,theId) inputSectors) params))}>

      <md-assist-chip href=@?{(DataR $ SectorsR (Sectors []),stati)}>
        <md-icon slot=icon>settings

  <details :not (null selectedBusinesses):open>
    <summary.md-typescale-label-large #idSummaryBusinesses>
      <md-ripple for=idSummaryBusinesses>
      _{MsgBusinesses}

    <md-chip-set ##{idChipSetBusinesses}>
      $forall Entity bid (Business _ name _ _) <- businesses
        $with (isSelected,theId) <- (elem bid selectedBusinesses,pack $ show $ fromSqlKey bid)
          $with scrollParams <- [(paramX1,pack $ show scrollX1),(paramX3,pack $ show scrollX3)]
            <md-filter-chip label=#{name} :isSelected:selected onclick="this.querySelector('a[href]').click()">
              $with params <- ((inputSectors <> inputWorkspaces) <> scrollParams)
                <a.with-scroll-x data-with-scroll-x-target=#{idChipSetBusinesses} data-with-scroll-x-param=#{paramX2}
                   :isSelected:href=@?{(DataR ServicesR,((<>) ((<>) (filter (((/=) theId) . snd) inputBusinesses) ((<>) inputSectors (paramsWokspaces bid))) scrollParams))}
                   :not isSelected:href=@?{(DataR ServicesR,((<>) ((:) (paramBusiness,theId) inputBusinesses) params))}>

      <md-assist-chip href=@?{(DataR DataBusinessesR,stati)}>
        <md-icon slot=icon>settings

  $if not (null selectedBusinesses)
    <details :not (null selectedWorkspaces):open>
      <summary.md-typescale-label-large #idSummaryWorkspaces>
        <md-ripple for=idSummaryWorkspaces>
        _{MsgWorkspaces}

      <md-chip-set ##{idChipSetWorkspaces}>
        $forall Entity wid (Workspace _ name _ _ _) <- workspaces
          $with (isSelected,theId) <- (elem wid selectedWorkspaces,pack $ show $ fromSqlKey wid)
            $with scrollParams <- [(paramX1,pack $ show scrollX1),(paramX2,pack $ show scrollX2)]
              <md-filter-chip label=#{name} :isSelected:selected onclick="this.querySelector('a[href]').click()">
                $with params <- ((inputSectors <> inputBusinesses) <> scrollParams)
                  <a.with-scroll-x data-with-scroll-x-target=#{idChipSetWorkspaces} data-with-scroll-x-param=#{paramX3}
                     :isSelected:href=@?{(DataR ServicesR,((<>) (filter (((/=) theId) . snd) inputWorkspaces) params))}
                     :not isSelected:href=@?{(DataR ServicesR,((<>) ((:) (paramWorkspace,theId) inputWorkspaces) params))}>
