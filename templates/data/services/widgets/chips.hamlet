
<div ##{idFilterChips}>
  <details :not (null selectedSectors):open ##{idDetailsSectors}>
    <summary.wave>
      <i>filter_alt
      <span.#{classSummaryLabel}>_{MsgSectors}
      <i.#{classSummaryEndIcon}>arrow_drop_down
      

    <nav.scroll.small-margin ##{idChipSetSectors}>
      $forall Entity tid (Sector name _ _) <- sectors
        $with (isSelected,theId) <- (elem tid selectedSectors,pack $ show $ fromSqlKey tid)
          $with scrollParams <- [(paramX2,pack $ show scrollX2),(paramX3,pack $ show scrollX3)]
            $with params <- ((<>) (inputBusinesses <> inputWorkspaces) scrollParams)
              <a.button.chip.with-scroll-x data-with-scroll-x-target=#{idChipSetSectors} data-with-scroll-x-param=#{paramX1}
                 :isSelected:href=@?{(DataR ServicesR,((<>) (filter (((/=) theId) . snd) inputSectors) params))}
                 :not isSelected:href=@?{(DataR ServicesR,((<>) ((:) (paramSector,theId) inputSectors) params))}
                 :isSelected:.fill>

                $if isSelected
                  <i>done
                  
                <span>#{name}

      <a.button.chip href=@?{(DataR $ SectorsR (Sectors []),stati)}>
        <i>settings

  <details :not (null selectedBusinesses):open>
    <summary.wave>
      <i>filter_alt
      <span.#{classSummaryLabel}>_{MsgBusinesses}
      <i.#{classSummaryEndIcon}>arrow_drop_down

    <nav.scroll.small-margin ##{idChipSetBusinesses}>
      $forall Entity bid (Business _ name _ _) <- businesses
        $with (isSelected,theId) <- (elem bid selectedBusinesses,pack $ show $ fromSqlKey bid)
          $with scrollParams <- [(paramX1,pack $ show scrollX1),(paramX3,pack $ show scrollX3)]
            $with params <- ((inputSectors <> inputWorkspaces) <> scrollParams)
              <a.button.chip.with-scroll-x data-with-scroll-x-target=#{idChipSetBusinesses} data-with-scroll-x-param=#{paramX2}
                 :isSelected:href=@?{(DataR ServicesR,((<>) ((<>) (filter (((/=) theId) . snd) inputBusinesses) ((<>) inputSectors (paramsWokspaces bid))) scrollParams))}
                 :not isSelected:href=@?{(DataR ServicesR,((<>) ((:) (paramBusiness,theId) inputBusinesses) params))}
                 :isSelected:.fill>
   
                $if isSelected
                  <i>done

                <span>#{name}

      <a.button.chip href=@?{(DataR DataBusinessesR,stati)}>
        <i>settings

  $if not (null selectedBusinesses)
    <details :not (null selectedWorkspaces):open>
      <summary.wave>
        <i>filter_alt
        <span.#{classSummaryLabel}>_{MsgWorkspaces}
        <i.#{classSummaryEndIcon}>arrow_drop_down

      <nav.scroll.small-margin ##{idChipSetWorkspaces}>
        $forall Entity wid (Workspace _ name _ _ _) <- workspaces
          $with (isSelected,theId) <- (elem wid selectedWorkspaces,pack $ show $ fromSqlKey wid)
            $with scrollParams <- [(paramX1,pack $ show scrollX1),(paramX2,pack $ show scrollX2)]
              $with params <- ((inputSectors <> inputBusinesses) <> scrollParams)
                <a.button.chip.with-scroll-x data-with-scroll-x-target=#{idChipSetWorkspaces} data-with-scroll-x-param=#{paramX3}
                   :isSelected:href=@?{(DataR ServicesR,((<>) (filter (((/=) theId) . snd) inputWorkspaces) params))}
                   :not isSelected:href=@?{(DataR ServicesR,((<>) ((:) (paramWorkspace,theId) inputWorkspaces) params))}
                   :isSelected:.fill>
     
                  $if isSelected
                    <i>done

                  <span>#{name}
