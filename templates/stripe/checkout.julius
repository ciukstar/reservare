
Array.from(
  document.querySelectorAll('.currency[data-value][data-currency]')
).forEach(function (x) {
  x.textContent = Intl.NumberFormat(navigator.language, {
    style: 'currency',
    currency: x.dataset.currency,
    minimumFractionDigits: 0,
    maximumFractionDigits: 2,
    useGrouping: true
  }).format(x.dataset.value / 100);
});

Array.from(
  document.querySelectorAll('.currency[data-value]:not([data-currency])')
).forEach(function (x) {
  x.textContent = Intl.NumberFormat(navigator.language, {
    minimumFractionDigits: 0,
    maximumFractionDigits: 2,
    useGrouping: true
  }).format(x.dataset.value);
});

// This is your test publishable API key.
const stripe = Stripe(#{pk});

// The items the customer wants to buy
const items = #{rawJS $ encodeToLazyText items};

let elements;

initialize();
checkStatus();

document.getElementById(#{idFormPayment}).addEventListener("submit", handleSubmit);

// Fetches a payment intent and captures the client secret
async function initialize() {
  setLoading(true);
  const response = await fetch("@{rtp $ IntentR cents currency}", {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify({ items })
  });
  
  const { status, message, paymentIntentId, clientSecret } = await response.json();

  if ("ok" === status) {
    
    const appearance = { theme: 'stripe' };
    
    elements = stripe.elements({ appearance, clientSecret });

    const paymentElementOptions = { layout: "tabs" };

    const paymentElement = elements.create("payment", paymentElementOptions);
    paymentElement.mount("##{rawJS idElementPayment}");

    [ document.getElementById(#{idButtonCancelPayment}),
      document.getElementById(#{idButtonBack})
    ].forEach(function (x) {
      x.addEventListener("click",function (e) {
        const r = fetch(`@{rtp $ CancelR}?pi=${paymentIntentId}`, {
          method: "POST",
          headers: { "Cotent-Type": "application/x-www-form-urlencoded" }
        }).then(function (result) {
          window.location.href = #{ult};
        });
      });
    });
  
    setLoading(false);
    
  } else {
    
    showMessage(message);
    document.getElementById(#{idElementPayment}).remove();
    
    [ document.getElementById(#{idButtonCancelPayment}),
      document.getElementById(#{idButtonBack})
    ].forEach(function (x) {
      x.addEventListener("click",function (e) {
        window.location.href = #{ult};
      });
    });
      
  }
  
}

async function handleSubmit(e) {
  e.preventDefault();
  setLoading(true);
  
  const { error } = await stripe.confirmPayment({
    elements,
    confirmParams: #{rawJS confirmParams}
  });

  // This point will only be reached if there is an immediate error when
  // confirming the payment. Otherwise, your customer will be redirected to
  // your `return_url`. For some payment methods like iDEAL, your customer will
  // be redirected to an intermediate site first to authorize the payment, then
  // redirected to the `return_url`.
  if (error.type === "card_error" || error.type === "validation_error") {
    showMessage(error.message);
  } else {
    showMessage("An unexpected error occurred.");
  }

  setLoading(false);
}

// Fetches the payment intent status after payment submission
async function checkStatus() {
  const clientSecret = new URLSearchParams(window.location.search).get(
    "payment_intent_client_secret"
  );

  if (!clientSecret) {
    return;
  }

  const { paymentIntent } = await stripe.retrievePaymentIntent(clientSecret);

  switch (paymentIntent.status) {
    case "succeeded":
      showMessage("Payment succeeded!");
      break;
    case "processing":
      showMessage("Your payment is processing.");
      break;
    case "requires_payment_method":
      showMessage("Your payment was not successful, please try again.");
      break;
    default:
      showMessage("Something went wrong.");
      break;
  }
}

function showMessage(messageText) {
  const banner = document.getElementById(#{idBannerStripe});
  banner.textContent = messageText;
  banner.style.display = 'block';
  
}

// Show a spinner on payment submission
function setLoading(isLoading) {
  if (isLoading) {
    // Disable the button and show a spinner
    document.getElementById(#{idButtonSubmitPayment}).disabled = true;
    document.querySelector("#spinner").classList.remove("hidden");
    document.querySelector("#button-text").classList.add("hidden");
  } else {
    document.getElementById(#{idButtonSubmitPayment}).disabled = false;
    document.querySelector("#spinner").classList.add("hidden");
    document.querySelector("#button-text").classList.remove("hidden");
  }
}
